// Copyright (c) 2025 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-read-only-property@v0.2.2-esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-keys@v0.2.2-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-uppercase@v0.2.2-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/string-lowercase@v0.3.0-esm/index.mjs";import{isPrimitive as i}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@v0.2.2-esm/index.mjs";import{isPrimitive as o}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-string@v0.2.2-esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.2.2-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.2.2-esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-capitalized@v0.2.2-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/string-uncapitalize@v0.3.0-esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/string-capitalize@v0.3.0-esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nonnegative-integer@v0.2.2-esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@v0.2.2-esm/index.mjs";import w from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-string-array@v0.2.2-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-contains@v0.2.2-esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/array-int32@v0.2.2-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/array-float64@v0.2.2-esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.2.1-esm/index.mjs";import{isPrimitive as c}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@v0.2.2-esm/index.mjs";import y from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.2.2-esm/index.mjs";import b from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-randu@v0.2.1-esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-floor@v0.2.3-esm/index.mjs";import{isPrimitive as x}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-integer@v0.2.2-esm/index.mjs";import k from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-index-of@v0.2.2-esm/index.mjs";import T from"https://cdn.jsdelivr.net/gh/stdlib-js/string-base-ends-with@v0.2.2-esm/index.mjs";import D from"https://cdn.jsdelivr.net/gh/stdlib-js/string-base-lowercase@v0.4.0-esm/index.mjs";import I from"https://cdn.jsdelivr.net/gh/stdlib-js/string-base-replace@v0.2.2-esm/index.mjs";import S from"https://cdn.jsdelivr.net/gh/stdlib-js/string-base-trim@v0.2.2-esm/index.mjs";var E={"i.e.":["i.e."],"I.e.":["I.e."],"I.E.":["I.E."],"e.g.":["e.g."],"E.g.":["E.g."],"E.G.":["E.G."],"et al.":["et al."],"etc.":["etc."],"vs.":["vs."],"A.S.A.P":["A.S.A.P"],"E.T.A.":["E.T.A."],"D.I.Y":["D.I.Y"],"R.S.V.P":["R.S.V.P"],"P.S.":["P.S."],"B.Y.O.B":["B.Y.O.B"],"Ms.":["Ms."],"Mr.":["Mr."],"Dr.":["Dr."],"Prof.":["Prof."],"Mrs.":["Mrs."],"Messrs.":["Messrs."],"Gov.":["Gov."],"Gen.":["Gen."],"Lt.":["Lt."],"Col.":["Col."],"Mt.":["Mt."],"Bros.":["Bros."],"Corp.":["Corp."],"Co.":["Co."],"co.":["co."],"Inc.":["Inc."],"Ltd.":["Ltd."],"Rep.":["Rep."],"Sen.":["Sen."],"Jr.":["Jr."],"Sr.":["Sr."],"Ph.D.":["Ph.D."],"J.D.":["J.D."],"M.D.":["M.D."],"Rev.":["Rev."],"Adm.":["Adm."],"St.":["St."],"a.m.":["a.m."],"p.m.":["p.m."],"b.c.":["b.c."],"B.C.":["B.C."],"a.d.":["a.d."],"A.D.":["A.D."],"b.c.e.":["b.c.e."],"B.C.E.":["B.C.E."],"Jan.":["Jan."],"Feb.":["Feb."],"Mar.":["Mar."],"Apr.":["Apr."],"May.":["May."],"Jun.":["Jun."],"Jul.":["Jul."],"Aug.":["Aug."],"Sep.":["Sep."],"Sept.":["Sept."],"Oct.":["Oct."],"Nov.":["Nov."],"Dec.":["Dec."],"Ala.":["Ala."],"Ariz.":["Ariz."],"Ark.":["Ark."],"Calif.":["Calif."],"Colo.":["Colo."],"Conn.":["Conn."],"Del.":["Del."],"D.C.":["D.C."],"Fla.":["Fla."],"Ga.":["Ga."],"Ill.":["Ill."],"Ind.":["Ind."],"Kans.":["Kans."],"Kan.":["Kan."],"Ky.":["Ky."],"La.":["La."],"Md.":["Md."],"Mass.":["Mass."],"Mich.":["Mich."],"Minn.":["Minn."],"Miss.":["Miss."],"Mo.":["Mo."],"Mont.":["Mont."],"Nebr.":["Nebr."],"Neb.":["Neb."],"Nev.":["Nev."],"N.H.":["N.H."],"N.J.":["N.J."],"N.M.":["N.M."],"N.Y.":["N.Y."],"N.C.":["N.C."],"N.D.":["N.D."],"Okla.":["Okla."],"Ore.":["Ore."],"Pa.":["Pa."],"Tenn.":["Tenn."],"Va.":["Va."],"Wash.":["Wash."],"Wis.":["Wis."]},M={"^_^":["^_^"],"=D":["=D"],";-p":[";-p"],":O":[":O"],":-/":[":-/"],xD:["xD"],V_V:["V_V"],";(":[";("],"(:":["(:"],'")':['")'],":Y":[":Y"],":]":[":]"],":3":[":3"],":(":[":("],":-)":[":-)"],"=3":["=3"],":))":[":))"],":>":[":>"],";p":[";p"],":p":[":p"],"=[[":["=[["],xDD:["xDD"],"<333":["<333"],"<33":["<33"],":P":[":P"],"o.O":["o.O"],"<3":["<3"],";-)":[";-)"],":)":[":)"],"-_-":["-_-"],":')":[":')"],o_O:["o_O"],";)":[";)"],"=]":["=]"],"(=":["(="],"-__-":["-__-"],":/":[":/"],":0":[":0"],"(^_^)":["(^_^)"],";D":[";D"],o_o:["o_o"],":((":[":(("],"=)":["=)"]},C={"'s":["'s"],"'S":["'S"],"ain't":["ai","n't"],aint:["ai","nt"],"Ain't":["Ai","n't"],"aren't":["are","n't"],arent:["are","nt"],"Aren't":["Are","n't"],"can't":["ca","n't"],cant:["ca","nt"],"Can't":["Ca","n't"],"can't've":["ca","n't","'ve"],"'cause":["'cause'"],cannot:["can","not"],Cannot:["Can","not"],"could've":["could","'ve"],couldve:["could","ve"],"Could've":["Could","'ve"],"couldn't":["could","n't"],couldnt:["could","nt"],"Couldn't":["Could","n't"],"couldn't've":["could","n't","'ve"],couldntve:["could","nt","ve"],"Couldn't've":["Could","n't","'ve"],"didn't":["did","n't"],didnt:["did","nt"],"Didn't":["Did","n't"],"doesn't":["does","n't"],doesnt:["does","nt"],"Doesn't":["Does","n't"],"don't":["do","n't"],dont:["do","nt"],"Don't":["Do","n't"],"hadn't":["had","n't"],hadnt:["had","nt"],"Hadn't":["Had","n't"],"hadn't've":["had","n't","'ve"],"hasn't":["has","n't"],hasnt:["has","nt"],"haven't":["have","n't"],havent:["have","nt"],"he'd":["he","'d"],hed:["he","d"],"he'd've":["he","'d","'ve"],hedve:["he","d","ve"],"he'll":["he","'ll"],"he'll've":["he","'ll","'ve"],"he's":["he","'s"],hes:["he","s"],"how'd":["how","'d"],howd:["how","d"],"how'd'y":["how","'d","'y"],"how'll":["how","'ll"],howll:["how","ll"],"how's":["how","'s"],hows:["how","s"],"I'd":["I","'d"],"I'd've":["I","'d","'ve"],"I'll":["I","'ll"],"i'll":["i","'ll"],"I'll've":["I","'ll","'ve"],"i'll've":["i","'ll","'ve"],"I'm":["I","'m"],"i'm":["i","'m"],Im:["I","m"],im:["i","m"],"I'ma":["I","'ma"],"i'ma":["i","'ma"],"I've":["I","'ve"],"i've":["i","'ve"],"isn't":["is","n't"],isnt:["is","nt"],"Isn't":["Is","n't"],"It'd":["It","'d"],"it'd":["it","'d"],"it'd've":["it","'d","'ve"],"it'll've":["it","'ll","'ve"],"it'll":["it","'ll"],itll:["it","ll"],"it's":["it","'s"],"let's":["let","'s"],lets:["let","s"],"ma'am":["ma'am"],"mayn't":["may","n't"],"mightn't":["might","n't"],"mightn't've":["might","n't","'ve"],"might've":["might","'ve"],"mustn't":["must","n't"],"mustn't've":["must","n't","'ve"],"must've":["must","'ve"],"needn't":["need","n't"],"needn't've":["need","n't","'ve"],"not've":["not","'ve"],"o'clock":["o'clock"],"oughtn't":["ought","n't"],"oughtn't've":["ought","n't","'ve"],"so've":["so","'ve"],"so's":["so","'s"],"shan't":["sha","n't"],"sha'n't":["sha'","n't"],"shan't've":["sha","n't","'ve"],"she'd":["she","'d"],"she'd've":["she","'d","'ve"],"she'll":["she","'ll"],"she'll've":["she","'ll","'ve"],"she's":["she","'s"],"should've":["should","'ve"],"shouldn't":["should","n't"],"shouldn't've":["should","n't","'ve"],"that'd":["that","'d"],"that'd've":["that","'d","'ve"],"that's":["that","'s"],thats:["that","s"],"there'd":["there","'d"],"there'd've":["there","'d","'ve"],"there's":["there","'s"],"they'd":["they","'d"],"They'd":["They","'d"],"they'd've":["they","'d","'ve"],"They'd've":["They","'d","'ve"],"they'll":["they","'ll"],"They'll":["They","'ll"],"they'll've":["they","'ll","'ve"],"They'll've":["They","'ll","'ve"],"they're":["they","'re"],"They're":["They","'re"],"they've":["they","'ve"],"They've":["They","'ve"],"to've":["to","'ve"],"wasn't":["was","n't"],"we'd":["we","'d"],"We'd":["We","'d"],"we'd've":["we","'d","'ve"],"we'll":["we","'ll"],"We'll":["We","'ll"],"we'll've":["we","'ll","'ve"],"We'll've":["We","'ll","'ve"],"we're":["we","'re"],"We're":["We","'re"],"we've":["we","'ve"],"We've":["We","'ve"],"weren't":["were","n't"],"what'll":["what","'ll"],"what'll've":["what","'ll","'ve"],"what're":["what","'re"],"what's":["what","'s"],"what've":["what","'ve"],"when's":["when","'s"],"when've":["when","'ve"],"where'd":["where","'d"],"where's":["where","'s"],"where've":["where","'ve"],"who'd":["who","'d"],"who'll":["who","'ll"],"who'll've":["who","'ll'","'ve'"],"who're":["who","'re"],"who's":["who","'s"],"who've":["who","'ve"],"why've":["why","'ve"],"why'll":["why","'ll"],"why're":["why","'re"],"why's":["why","'s"],"will've":["will","'ve"],"won't":["wo","n't"],wont:["wo","nt"],"won't've":["wo","n't","'ve"],"would've":["would","'ve"],"wouldn't":["would","n't"],"wouldn't've":["would","n't","'ve"],"y'all":["y'","all"],"y'all'd":["y'","all","'d"],"y'all'd've":["y'","all","'d","'ve"],"y'all're":["y'","all","'re'"],"y'all've":["y'","all","ve"],"you'd":["you","'d"],"You'd":["You","'d"],"you'd've":["you","'d","'ve"],"You'd've":["You","'d","'ve"],"you'll":["you","'ll"],"You'll":["You","'ll"],"you'll've":["you","'ll","'ve"],"You'll've":["You","'ll","'ve"],"you're":["you","'re"],"You're":["You","'re"],"you've":["you","'ve"],"You've":["You","'ve"]},z=/^([,([{*<"“'`‘]|\.{1,3})/gi,A=/([,.!?%*>:;"'”`)\]}]|\.\.\.)$/gi;function O(e,t){var s;for(s=0;s<t.length;s++)e.push(t[s]);return e}function V(e){var t,s,n,i=[],o=[];do{M[e]||E[e]||C[e]?s=!0:(t=e.split(z)).length>1?(i.push(t[1]),e=t[2]):(t=e.split(A)).length>1?(e=t[0],o.unshift(t[1])):s=!0}while(!s);return n=i,e&&n.push(e),"..."===o[o.length-1]&&(o.pop(),o.unshift("...")),O(n,o),n}function $(e,t){var s,n,h,r,d,v;if(!o(e))throw new TypeError(a("invalid argument. First argument must be a string. Value: `%s`.",e));if(arguments.length>1&&!i(t))throw new TypeError(a("invalid argument. Second argument must be a boolean. Value: `%s`.",t));if(!e)return[];for(n=t?e.split(/(\s+)/):e.split(/\s+/),d={},h=[],v=0;v<n.length;v++)r=n[v],l(d,r)?O(h,d[r]):(O(h,s=V(r)),d[r]=s);return h}var P={afaik:"as far as I know",afk:"away from keyboard",ama:"ask me anything",asap:"as soon as possible",b2b:"business to business",bbl:"be back later",bbs:"be back soon",bday:"birthday",brb:"be right back",btw:"by the way",cc:"carbon copy",cmon:"come on",cu:"see you",cya:"see you",cys:"check your settings",d2d:"direct to direct",dr:"doctor",e2e:"end to end",faq:"frequently asked question",fav:"favorite",favs:"favorites",ffs:"for f*ck's sake",foaf:"friend of a friend",ftw:"for the win",fyi:"for your information",g2g:"got to go",g2m:"got to meet you",gj:"good job",gm:"good morning",gmta:"great minds think alike",hth:"hope this helps",ianal:"I am not a lawyer",ianars:"I am not a rocket scientist",ic:"I see",icymi:"in case you missed it",idk:"i do not know",iirc:"if I recall correctly",ikr:"i know right",imho:"in my humble opinion",imnsho:"in my not so humble opinion",imo:"in my opinion",iow:"in other words",irl:"in real life",jj:"just joking",jk:"just kidding",jooc:"just out of curiosity",kk:"okay",l8:"late",l8r:"later",lmao:"laugh my a** off",lol:"laughing out loud",mfw:"my face when",myob:"mind your own business",nm:"never mind",noyb:"none of your business",np:"no problem",nvm:"never mind",oic:"oh, i see",omfg:"oh my f*cking god",omg:"oh my god",omw:"on my way",ooc:"out of character",oof:"out of focus",ot:"off topic",otoh:"on the other hand",p2p:"peer to peer",pfo:"please f*ck off",pita:"pain in the a**",plz:"please",pms:"personal messages",r8:"right",rofl:"rolling on the floor laughing",roflmao:"rolling on the floor laughing my a** off",rp:"reply",rps:"rock paper scissors",rpsls:"rock paper scissors lizard spock",rtfa:"read the f*cking article",rtfm:"read the f*cking manual",ru:"are you",s2s:"same to same",smh:"shake my head",tbh:"to be honest",thx:"thanks",tia:"thanks in advance",tldr:"too long did not read",ttyl:"talk to you later",wtf:"what the f*ck",wtg:"way to go",wtgp:"way to go pal",ymmv:"your mileage may vary"},N=t(P);function W(e){var t,i,l,h,r,d;if(!o(e))throw new TypeError(a("invalid argument. Must provide a string. Value: `%s`.",e));for(l="",t=$(e,!0),r=0;r<t.length;r++){if(i=t[r],s(i)){for(d=0;d<N.length;d++)if(h=N[d],n(i)===h){i=P[h];break}}else for(d=0;d<N.length;d++)if(i===(h=N[d])){i=P[h];break}l+=i}return l}var Y={"'s":"is","'S":"Is","aren't":"are not",arent:"are not","can't":"can not",cant:"can not","can't've":"can not have","'cause":"because",cannot:"can not","could've":"could have",couldve:"could have","couldn't":"could not",couldnt:"could not","couldn't've":"could not have",couldntve:"could not have","didn't":"did not",didnt:"did not","doesn't":"does not",doesnt:"does not","don't":"do not",dont:"do not","hadn't":"had not",hadnt:"had not","hadn't've":"had not have","hasn't":"has not",hasnt:"has not","haven't":"have not",havent:"have not","he'd":"he would",hed:"he would","he'd've":"he would have",hedve:"he would have","he'll":"he will","he'll've":"he will have","he's":"he is",hes:"he is","how'd":"how did",howd:"how did","how'd'y":"how did you","how'll":"how will",howll:"how will","how's":"how is",hows:"how is","i'd":"i would","i'd've":"i would have","i'll":"i will","i'll've":"i will have","i'm":"i am",im:"i am","i'ma":"i am going to","i've":"i have","isn't":"is not",isnt:"is not","it'd":"it would","it'd've":"it would have","it'll've":"it will have","it'll":"it will",itll:"it will","it's":"it is","let's":"let us",lets:"let us","ma'am":"madam","mayn't":"may not","mightn't":"it might not","mightn't've":"might not have","might've":"might have","mustn't":"must not","mustn't've":"must not have","must've":"must have","needn't":"need not","needn't've":"need not have","not've":"not have","oughtn't":"ought not","oughtn't've":"ought not to have","so've":"so have","so's":"so is","shan't":"shall not","sha'n't":"shall not","shan't've":"shall not have","she'd":"she would","she'd've":"she would have","she'll":"she will","she'll've":"she will have","she's":"she is","should've":"should have","shouldn't":"should not","shouldn't've":"should not have","that'd":"that would","that'd've":"that would have","that's":"that is",thats:"that is","there'd":"there would","there'd've":"there would have","there's":"there is","they'd":"they would","they'd've":"they would have","they'll":"they will","they'll've":"they will have","they're":"they are","they've":"they have","to've":"to have","wasn't":"was not","we'd":"we would","we'd've":"we would have","we'll":"we will","we'll've":"we will have","we're":"we are","we've":"we have","weren't":"were not","what'll":"what will","what'll've":"what will have","what're":"what are","what's":"what has/is","what've":"what have","when's":"when is","when've":"when have","where'd":"where would","where's":"where is","where've":"where have","who'd":"who would","who'll":"who will","who'll've":"who will have","who're":"who are","who's":"who is","who've":"who have","why've":"why have","why'll":"why will","why're":"why are","why's":"why is","will've":"will have","won't":"will not",wont:"will not","won't've":"will not have","would've":"would have","wouldn't":"would not","wouldn't've":"would not have","y'all":"you all","y'all'd":"you all would","y'all'd've":"you all would have","y'all're":"you all are","y'all've":"you all have","you'd":"you would","you'd've":"you would have","you'll":"you will","you'll've":"you will have","you're":"you are","you've":"you have"},K=t(Y);function _(e){var t,s,n,i,l,v;if(!o(e))throw new TypeError(a("invalid argument. Must provide a string. Value: `%s`.",e));for(n="",t=$(e,!0),l=0;l<t.length;l++){if(s=t[l],h(s)){for(v=0;v<K.length;v++)if(i=K[v],r(s)===i){s=d(Y[i]);break}}else for(v=0;v<K.length;v++)if(s===(i=K[v])){s=Y[i];break}n+=s}return n}function L(){var e,t,s,n,i,o,l;for(1===arguments.length?s=arguments[0]:2===arguments.length&&(s=arguments[0],e=arguments[1]),t=s.length,i=1,l=0;l<t;l++)i*=s[l];return n="int32"===e?new g(i):new p(i),(o={}).dtype=e,o.shape=s,o.strides=[s[1],1],o.offset=0,o.ndims=s.length,o.length=n.length,o.nbytes=n.byteLength,o.data=n,f(o,"get",(function(e,t){var s=this.offset+e*this.strides[0]+t*this.strides[1];return this.data[s]})),f(o,"set",(function(e,t,s){e=this.offset+e*this.strides[0]+t*this.strides[1],e>=0&&(this.data[e]=s);return this})),o}function J(){var e,t,s,n;for(e=L([this.D,this.K]),s=0;s<this.D;s++)for(n=0;n<this.K;n++)t=(this.nd.get(s,n)+this.alpha)/(this.ndSum[s]+this.K*this.alpha),e.set(s,n,t);return e}function R(){var e,t,s,n;for(e=L([this.K,this.W]),s=0;s<this.K;s++)for(n=0;n<this.W;n++)t=(this.nw.get(n,s)+this.beta)/(this.nwSum[s]+this.W*this.beta),e.set(s,n,t);return e}function B(){var e,t,s,n,i,o;for(this.z=[],i=0;i<this.D;i++){for(this.z.push([]),s=this.w[i].length,o=0;o<s;o++)t=j(b()*this.K),this.z[i].push(t);for(this.ndSum[i]=s,o=0;o<s;o++)n=this.w[i][o],e=this.z[i][o],this.nw.set(n,e,this.nw.get(n,e)+1),this.nd.set(i,e,this.nd.get(i,e)+1),this.nwSum[e]=this.nwSum[e]+1}}function F(e,t,s){var n,i,o,l,a,h,r,d;for(h=L([o=e.shape[0],l=e.shape[1]]),n=(s-1)/s,i=1/s,r=0;r<o;r++)for(d=0;d<l;d++)a=n*e.get(r,d)+i*t.get(r,d),h.set(r,d,a);return h}function G(e,t,s){var n,i,o,l,h,r,d,v,w,m,g,p,f,c;if(!u(e))throw new TypeError(a("invalid argument. First argument must be a positive integer. Value: `%s`.",e));if(!u(t))throw new TypeError(a("invalid argument. Second argument must be a positive integer. Value: `%s`.",t));if(!u(s))throw new TypeError(a("invalid argument. Third argument must be a positive integer. Value: `%s`.",s));for(i=this.W*this.beta,n=this.K*this.alpha,g=0;g<e;g++){for(m=0;m<this.D;m++)for(c=0;c<this.ndSum[m];c++){for(r=this.w[m][c],o=this.z[m][c],this.nw.set(r,o,this.nw.get(r,o)-1),this.nd.set(m,o,this.nd.get(m,o)-1),this.ndSum[m]-=1,this.nwSum[o]-=1,h=[],p=0;p<this.K;p++)h.push((this.nw.get(r,p)+this.beta)/(this.nwSum[p]+i)*(this.nd.get(m,p)+this.alpha)/(this.ndSum[m]+n));for(p=1;p<this.K;p++)h[p]+=h[p-1];for(f=h[this.K-1]*b(),o=0,w=0;w<this.K;w++)if(h[w]>f){o=w;break}this.nw.set(r,o,this.nw.get(r,o)+1),this.nd.set(m,o,this.nd.get(m,o)+1),this.nwSum[o]+=1,this.ndSum[m]+=1,this.z[m][c]=o}g%s==0&&g>t&&(d=this.getPhis(),l=this.getThetas(),this.phiList.push(d),this.thetaList.push(l),v=this.phiList.length,this.avgPhi=1===v?d:F(this.avgPhi,d,v),v=this.thetaList.length,this.avgTheta=1===v?l:F(this.avgTheta,l,v))}}function H(e,t){var s;for(s=0;s<e.length;s++)if(e[s]===t)return s;return-1}function q(t,s,n){var i,o,h,r,d,p,f,b,j,x,k,T,D,I,S,E,M;if(!w(t))throw new TypeError(a("invalid argument. First argument must be an array of strings. Value: `%s`.",t));if(!u(s))throw new TypeError(a("invalid argument. Number of topics must be a positive integer. Value: `%s`.",s));if(p={},arguments.length>2&&(f=function(e,t){return y(t)?l(t,"alpha")&&(e.alpha=t.alpha,!c(e.alpha))?new TypeError(a("invalid option. `%s` option must be a positive number. Option: `%s`.","alpha",e.alpha)):l(t,"beta")&&(e.beta=t.beta,!c(e.beta))?new TypeError(a("invalid option. `%s` option must be a positive number. Option: `%s`.","beta",e.beta)):null:new TypeError(a("invalid argument. Options argument must be an object. Value: `%s`.",t))}(p,n),f))throw f;for(T=t.length,r=p.alpha||50/s,d=p.beta||.1,o=[],M=[],b=0,D=0;D<T;D++)for(M.push([]),j=(k=$(t[D])).length,I=0;I<j;I++)i=k[I],-1===(x=H(o,i))?(o.push(i),M[D].push(b),b+=1):M[D].push(x);return E=o.length,e(h={},"K",s),e(h,"D",T),e(h,"W",E),e(h,"alpha",r),e(h,"beta",d),e(h,"init",B),e(h,"fit",G),e(h,"getPhis",R),e(h,"getThetas",J),e(h,"getTerms",(function(e,t){var n,i,l,h,r,d;if(!v(e)||e>=s)throw new TypeError(a("invalid argument. First argument must be a nonnegative integer which is less than the total number of topics. Value: `%s`.",e));if(t){if(!u(t))throw new TypeError(a("invalid argument. Second argument must be a positive integer. Value: `%s`.",t))}else t=10;for(l=[],n=[],d=0;d<t;d++){for(h=0,S=0;S<this.W;S++)(i=this.avgPhi.get(e,S))>h&&!m(n,S)&&(h=i,r=S);n.push(r),l.push({word:o[r],prob:h})}return l})),h.nwSum=new g(s),h.ndSum=new g(T),h.nw=L([E,s],"int32"),h.nd=L([T,s],"int32"),h.phiList=[],h.thetaList=[],h.w=M,h.init(),h}var Z=["en","es","fin","fr","de","it","pt","swe"],U=["masculine","feminine"];function Q(e,t){var s,n,h,r,d;if(!o(e)&&!x(e))throw new TypeError(a("invalid argument. First argument must be a string or integer. Value: `%s`.",e));if(r={},arguments.length>1&&(d=function(e,t){return y(t)?l(t,"lang")&&(e.lang=t.lang,-1===k(Z,e.lang))?new TypeError(a('invalid option. `%s` option must be one of the following: "%s". Value: `%s`.',"lang",Z.join('", "'),e.lang)):l(t,"suffixOnly")&&(e.suffixOnly=t.suffixOnly,!i(e.suffixOnly))?new TypeError(a("invalid option. `%s` option must be a boolean. Option: `%s`.","suffixOnly",e.suffixOnly)):l(t,"gender")&&(e.gender=t.gender,-1===k(U,e.gender))?new TypeError(a('invalid option. `%s` option must be one of the following: "%s". Value: `%s`.',"gender",U.join('", "'),e.gender)):null:new TypeError(a("invalid argument. Options argument must be an object. Value: `%s`.",t))}(r,t),d))throw d;switch(h=(e=String(e))[e.length-1],n=e.slice(-2),r.lang){case"fr":s="1"===e?"feminine"===r.gender?"re":"er":"e";break;case"de":case"fin":s=".";break;case"it":case"pt":case"es":s="feminine"===r.gender?"ª":"º";break;case"swe":s="11"!==n&&"1"===h||"12"!==n&&"2"===h?":a":":e";break;default:s="11"!==n&&"1"===h?"st":"12"!==n&&"2"===h?"nd":"13"!==n&&"3"===h?"rd":"th"}return r.suffixOnly?s:e+s}var X={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},ee={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},te="[aeiouy]",se="[^aeiou][^aeiouy]*",ne=te+"[aeiou]*",ie=new RegExp("^"+se+te+"[^aeiouwxy]$"),oe=new RegExp("^("+se+")?"+ne+se),le=new RegExp("^("+se+")?"+ne+se+"("+ne+")?$"),ae=new RegExp("^("+se+")?"+ne+se+ne+se),he=new RegExp("^("+se+")?"+te),re=/^(.+?)(ss|i)es$/,de=/^(.+?)([^s])s$/,ve=/^(.+?)eed$/,ue=/^(.+?)(ed|ing)$/,we=/^(.+?)y$/,me=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,ge=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,pe=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,fe=/^(.+?)(s|t)(ion)$/,ce=/^(.+?)e$/,ye=/.$/,be=/(at|bl|iz)$/,je=new RegExp("([^aeiouylsz])\\1$");function xe(e){var t,s,n,i;if(!o(e))throw new TypeError(a("invalid argument. First argument must be a string. Value: `%s`.",e));return e.length<3||("y"===(t=(e=D(e))[0])&&(e=t.toUpperCase()+e.substr(1)),re.test(e)?e=I(e,re,"$1$2"):de.test(e)&&(e=I(e,de,"$1$2")),ve.test(e)?(i=ve.exec(e),oe.test(i[1])&&(e=I(e,ye,""))):ue.test(e)&&(n=(i=ue.exec(e))[1],he.test(n)&&(e=n,be.test(e)?e+="e":je.test(e)?e=I(e,ye,""):ie.test(e)&&(e+="e"))),we.test(e)&&(n=(i=we.exec(e))[1],he.test(n)&&(e=n+"i")),me.test(e)&&(n=(i=me.exec(e))[1],s=i[2],oe.test(n)&&(e=n+X[s])),ge.test(e)&&(n=(i=ge.exec(e))[1],s=i[2],oe.test(n)&&(e=n+ee[s])),pe.test(e)?(n=(i=pe.exec(e))[1],ae.test(n)&&(e=n)):fe.test(e)&&(n=(i=fe.exec(e))[1]+i[2],ae.test(n)&&(e=n)),ce.test(e)&&(n=(i=ce.exec(e))[1],(ae.test(n)||le.test(n)&&!ie.test(n))&&(e=n)),T(e,"ll",e.length)&&ae.test(e)&&(e=I(e,ye,"")),"y"===t&&(e=t.toLowerCase()+e.substr(1))),e}var ke=/^[a-z]+$/,Te=/^[A-Z][a-z]{0,4}$/,De=/^([A-Z]\.)*[A-Z]$/,Ie=/^[0-9]$/,Se=/^[{[(<:;"'”`]/,Ee=/[})\]>:;"'”`]$/,Me=/^["'`]$/;function Ce(e,t){var s,n,i=t-1,o=t+1;if(n=e[t],Me.test(n)&&t>0&&("."===e[i]||"!"===e[i]||"?"===e[i])){if((o=t+1)<e.length){for(;o<e.length&&" "===e[o];)o+=1;if(o<e.length&&(s=e[o],ke.test(s)))return!1}return!0}return!("."!==n||Te.test(e[i])||De.test(e[i])||Ie.test(e[i])||Se.test(e[i])||Ee.test(e[o]))||!("!"!==n&&"?"!==n||Se.test(e[i])||Ee.test(e[o])||"!"===e[o]||"?"===e[o])}function ze(e){var t,s,n,i;if(!o(e))throw new TypeError("invalid argument. Must provide a string. Value: `"+e+"`.");for(s=$(e,!0),t="",n=[],i=0;i<s.length;i++)t+=s[i],Ce(s,i)&&(n.push(S(t)),t="");return""!==t&&n.push(S(t)),n}var Ae={};e(Ae,"expandAcronyms",W),e(Ae,"expandContractions",_),e(Ae,"lda",q),e(Ae,"ordinalize",Q),e(Ae,"porterStemmer",xe),e(Ae,"sentencize",ze),e(Ae,"tokenize",$);export{Ae as default,W as expandAcronyms,_ as expandContractions,q as lda,Q as ordinalize,xe as porterStemmer,ze as sentencize,$ as tokenize};
//# sourceMappingURL=index.mjs.map
