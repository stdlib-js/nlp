// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-read-only-property@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-keys@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-capitalized@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/string-uncapitalize@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/string-capitalize@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-string@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nonnegative-integer@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-string-array@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-contains@esm/index.mjs";import w from"https://cdn.jsdelivr.net/gh/stdlib-js/array-int32@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/array-float64@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import y from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import c from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-randu@esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-floor@esm/index.mjs";import b from"https://cdn.jsdelivr.net/gh/stdlib-js/string-ends-with@esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/string-lowercase@esm/index.mjs";import x from"https://cdn.jsdelivr.net/gh/stdlib-js/string-replace@esm/index.mjs";var D={"^_^":["^_^"],"=D":["=D"],";-p":[";-p"],":O":[":O"],":-/":[":-/"],xD:["xD"],V_V:["V_V"],";(":[";("],"(:":["(:"],'")':['")'],":Y":[":Y"],":]":[":]"],":3":[":3"],":(":[":("],":-)":[":-)"],"=3":["=3"],":))":[":))"],":>":[":>"],";p":[";p"],":p":[":p"],"=[[":["=[["],xDD:["xDD"],"<333":["<333"],"<33":["<33"],":P":[":P"],"o.O":["o.O"],"<3":["<3"],";-)":[";-)"],":)":[":)"],"-_-":["-_-"],":')":[":')"],o_O:["o_O"],";)":[";)"],"=]":["=]"],"(=":["(="],"-__-":["-__-"],":/":[":/"],":0":[":0"],"(^_^)":["(^_^)"],";D":[";D"],o_o:["o_o"],":((":[":(("],"=)":["=)"]},S={"'s":["'s"],"'S":["'S"],"ain't":["ai","n't"],aint:["ai","nt"],"Ain't":["Ai","n't"],"aren't":["are","n't"],arent:["are","nt"],"Aren't":["Are","n't"],"can't":["ca","n't"],cant:["ca","nt"],"Can't":["Ca","n't"],"can't've":["ca","n't","'ve"],"'cause":["'cause'"],cannot:["can","not"],Cannot:["Can","not"],"could've":["could","'ve"],couldve:["could","ve"],"Could've":["Could","'ve"],"couldn't":["could","n't"],couldnt:["could","nt"],"Couldn't":["Could","n't"],"couldn't've":["could","n't","'ve"],couldntve:["could","nt","ve"],"Couldn't've":["Could","n't","'ve"],"didn't":["did","n't"],didnt:["did","nt"],"Didn't":["Did","n't"],"doesn't":["does","n't"],doesnt:["does","nt"],"Doesn't":["Does","n't"],"don't":["do","n't"],dont:["do","nt"],"Don't":["Do","n't"],"hadn't":["had","n't"],hadnt:["had","nt"],"Hadn't":["Had","n't"],"hadn't've":["had","n't","'ve"],"hasn't":["has","n't"],hasnt:["has","nt"],"haven't":["have","n't"],havent:["have","nt"],"he'd":["he","'d"],hed:["he","d"],"he'd've":["he","'d","'ve"],hedve:["he","d","ve"],"he'll":["he","'ll"],"he'll've":["he","'ll","'ve"],"he's":["he","'s"],hes:["he","s"],"how'd":["how","'d"],howd:["how","d"],"how'd'y":["how","'d","'y"],"how'll":["how","'ll"],howll:["how","ll"],"how's":["how","'s"],hows:["how","s"],"I'd":["I","'d"],"I'd've":["I","'d","'ve"],"I'll":["I","'ll"],"i'll":["i","'ll"],"I'll've":["I","'ll","'ve"],"i'll've":["i","'ll","'ve"],"I'm":["I","'m"],"i'm":["i","'m"],Im:["I","m"],im:["i","m"],"I'ma":["I","'ma"],"i'ma":["i","'ma"],"I've":["I","'ve"],"i've":["i","'ve"],"isn't":["is","n't"],isnt:["is","nt"],"Isn't":["Is","n't"],"It'd":["It","'d"],"it'd":["it","'d"],"it'd've":["it","'d","'ve"],"it'll've":["it","'ll","'ve"],"it'll":["it","'ll"],itll:["it","ll"],"it's":["it","'s"],"let's":["let","'s"],lets:["let","s"],"ma'am":["ma'am"],"mayn't":["may","n't"],"mightn't":["might","n't"],"mightn't've":["might","n't","'ve"],"might've":["might","'ve"],"mustn't":["must","n't"],"mustn't've":["must","n't","'ve"],"must've":["must","'ve"],"needn't":["need","n't"],"needn't've":["need","n't","'ve"],"not've":["not","'ve"],"o'clock":["o'clock"],"oughtn't":["ought","n't"],"oughtn't've":["ought","n't","'ve"],"so've":["so","'ve"],"so's":["so","'s"],"shan't":["sha","n't"],"sha'n't":["sha'","n't"],"shan't've":["sha","n't","'ve"],"she'd":["she","'d"],"she'd've":["she","'d","'ve"],"she'll":["she","'ll"],"she'll've":["she","'ll","'ve"],"she's":["she","'s"],"should've":["should","'ve"],"shouldn't":["should","n't"],"shouldn't've":["should","n't","'ve"],"that'd":["that","'d"],"that'd've":["that","'d","'ve"],"that's":["that","'s"],thats:["that","s"],"there'd":["there","'d"],"there'd've":["there","'d","'ve"],"there's":["there","'s"],"they'd":["they","'d"],"They'd":["They","'d"],"they'd've":["they","'d","'ve"],"They'd've":["They","'d","'ve"],"they'll":["they","'ll"],"They'll":["They","'ll"],"they'll've":["they","'ll","'ve"],"They'll've":["They","'ll","'ve"],"they're":["they","'re"],"They're":["They","'re"],"they've":["they","'ve"],"They've":["They","'ve"],"to've":["to","'ve"],"wasn't":["was","n't"],"we'd":["we","'d"],"We'd":["We","'d"],"we'd've":["we","'d","'ve"],"we'll":["we","'ll"],"We'll":["We","'ll"],"we'll've":["we","'ll","'ve"],"We'll've":["We","'ll","'ve"],"we're":["we","'re"],"We're":["We","'re"],"we've":["we","'ve"],"We've":["We","'ve"],"weren't":["were","n't"],"what'll":["what","'ll"],"what'll've":["what","'ll","'ve"],"what're":["what","'re"],"what's":["what","'s"],"what've":["what","'ve"],"when's":["when","'s"],"when've":["when","'ve"],"where'd":["where","'d"],"where's":["where","'s"],"where've":["where","'ve"],"who'd":["who","'d"],"who'll":["who","'ll"],"who'll've":["who","'ll'","'ve'"],"who're":["who","'re"],"who's":["who","'s"],"who've":["who","'ve"],"why've":["why","'ve"],"why'll":["why","'ll"],"why're":["why","'re"],"why's":["why","'s"],"will've":["will","'ve"],"won't":["wo","n't"],wont:["wo","nt"],"won't've":["wo","n't","'ve"],"would've":["would","'ve"],"wouldn't":["would","n't"],"wouldn't've":["would","n't","'ve"],"y'all":["y'","all"],"y'all'd":["y'","all","'d"],"y'all'd've":["y'","all","'d","'ve"],"y'all're":["y'","all","'re'"],"y'all've":["y'","all","ve"],"you'd":["you","'d"],"You'd":["You","'d"],"you'd've":["you","'d","'ve"],"You'd've":["You","'d","'ve"],"you'll":["you","'ll"],"You'll":["You","'ll"],"you'll've":["you","'ll","'ve"],"You'll've":["You","'ll","'ve"],"you're":["you","'re"],"You're":["You","'re"],"you've":["you","'ve"],"You've":["You","'ve"]},T=h.isPrimitive,C=l.isPrimitive,I=o,M=a,E={"i.e.":["i.e."],"I.e.":["I.e."],"I.E.":["I.E."],"e.g.":["e.g."],"E.g.":["E.g."],"E.G.":["E.G."],"et al.":["et al."],"etc.":["etc."],"vs.":["vs."],"A.S.A.P":["A.S.A.P"],"E.T.A.":["E.T.A."],"D.I.Y":["D.I.Y"],"R.S.V.P":["R.S.V.P"],"P.S.":["P.S."],"B.Y.O.B":["B.Y.O.B"],"Ms.":["Ms."],"Mr.":["Mr."],"Dr.":["Dr."],"Prof.":["Prof."],"Mrs.":["Mrs."],"Messrs.":["Messrs."],"Gov.":["Gov."],"Gen.":["Gen."],"Lt.":["Lt."],"Col.":["Col."],"Mt.":["Mt."],"Bros.":["Bros."],"Corp.":["Corp."],"Co.":["Co."],"co.":["co."],"Inc.":["Inc."],"Ltd.":["Ltd."],"Rep.":["Rep."],"Sen.":["Sen."],"Jr.":["Jr."],"Sr.":["Sr."],"Ph.D.":["Ph.D."],"J.D.":["J.D."],"M.D.":["M.D."],"Rev.":["Rev."],"Adm.":["Adm."],"St.":["St."],"a.m.":["a.m."],"p.m.":["p.m."],"b.c.":["b.c."],"B.C.":["B.C."],"a.d.":["a.d."],"A.D.":["A.D."],"b.c.e.":["b.c.e."],"B.C.E.":["B.C.E."],"Jan.":["Jan."],"Feb.":["Feb."],"Mar.":["Mar."],"Apr.":["Apr."],"May.":["May."],"Jun.":["Jun."],"Jul.":["Jul."],"Aug.":["Aug."],"Sep.":["Sep."],"Sept.":["Sept."],"Oct.":["Oct."],"Nov.":["Nov."],"Dec.":["Dec."],"Ala.":["Ala."],"Ariz.":["Ariz."],"Ark.":["Ark."],"Calif.":["Calif."],"Colo.":["Colo."],"Conn.":["Conn."],"Del.":["Del."],"D.C.":["D.C."],"Fla.":["Fla."],"Ga.":["Ga."],"Ill.":["Ill."],"Ind.":["Ind."],"Kans.":["Kans."],"Kan.":["Kan."],"Ky.":["Ky."],"La.":["La."],"Md.":["Md."],"Mass.":["Mass."],"Mich.":["Mich."],"Minn.":["Minn."],"Miss.":["Miss."],"Mo.":["Mo."],"Mont.":["Mont."],"Nebr.":["Nebr."],"Neb.":["Neb."],"Nev.":["Nev."],"N.H.":["N.H."],"N.J.":["N.J."],"N.M.":["N.M."],"N.Y.":["N.Y."],"N.C.":["N.C."],"N.D.":["N.D."],"Okla.":["Okla."],"Ore.":["Ore."],"Pa.":["Pa."],"Tenn.":["Tenn."],"Va.":["Va."],"Wash.":["Wash."],"Wis.":["Wis."]},z=D,A=S,P=/^([,([{*<"“'`‘.])/gi,N=/([,.!?%*>:;"'”`)\]}])$/gi;function V(e,t){var s;for(s=0;s<t.length;s++)e.push(t[s]);return e}function W(e){var t,s,i,n=[],h=[];do{z[e]||E[e]||A[e]?s=!0:(t=e.split(P)).length>1?(n.push(t[1]),e=t[2]):(t=e.split(N)).length>1?(e=t[0],h.push(t[1])):s=!0}while(!s);return(i=n).push(e),V(i,h),i}var Y=function(e,t){var s,i,n,h,l,o;if(!C(e))throw new TypeError(M("invalid argument. First argument must be a string primitive. Value: `%s`.",e));if(arguments.length>1&&!T(t))throw new TypeError(M("invalid argument. Second argument must be a boolean primitive. Value: `%s`.",t));if(!e)return[];for(i=t?e.split(/(\s+)/):e.split(/\s+/),l={},n=[],o=0;o<i.length;o++)h=i[o],I(l,h)?V(n,l[h]):(V(n,s=W(h)),l[h]=s);return n},$={"'s":"is","'S":"Is","aren't":"are not",arent:"are not","can't":"can not",cant:"can not","can't've":"can not have","'cause":"because",cannot:"can not","could've":"could have",couldve:"could have","couldn't":"could not",couldnt:"could not","couldn't've":"could not have",couldntve:"could not have","didn't":"did not",didnt:"did not","doesn't":"does not",doesnt:"does not","don't":"do not",dont:"do not","hadn't":"had not",hadnt:"had not","hadn't've":"had not have","hasn't":"has not",hasnt:"has not","haven't":"have not",havent:"have not","he'd":"he would",hed:"he would","he'd've":"he would have",hedve:"he would have","he'll":"he will","he'll've":"he will have","he's":"he is",hes:"he is","how'd":"how did",howd:"how did","how'd'y":"how did you","how'll":"how will",howll:"how will","how's":"how is",hows:"how is","i'd":"i would","i'd've":"i would have","i'll":"i will","i'll've":"i will have","i'm":"i am",im:"i am","i'ma":"i am going to","i've":"i have","isn't":"is not",isnt:"is not","it'd":"it would","it'd've":"it would have","it'll've":"it will have","it'll":"it will",itll:"it will","it's":"it is","let's":"let us",lets:"let us","ma'am":"madam","mayn't":"may not","mightn't":"it might not","mightn't've":"might not have","might've":"might have","mustn't":"must not","mustn't've":"must not have","must've":"must have","needn't":"need not","needn't've":"need not have","not've":"not have","oughtn't":"ought not","oughtn't've":"ought not to have","so've":"so have","so's":"so is","shan't":"shall not","sha'n't":"shall not","shan't've":"shall not have","she'd":"she would","she'd've":"she would have","she'll":"she will","she'll've":"she will have","she's":"she is","should've":"should have","shouldn't":"should not","shouldn't've":"should not have","that'd":"that would","that'd've":"that would have","that's":"that is",thats:"that is","there'd":"there would","there'd've":"there would have","there's":"there is","they'd":"they would","they'd've":"they would have","they'll":"they will","they'll've":"they will have","they're":"they are","they've":"they have","to've":"to have","wasn't":"was not","we'd":"we would","we'd've":"we would have","we'll":"we will","we'll've":"we will have","we're":"we are","we've":"we have","weren't":"were not","what'll":"what will","what'll've":"what will have","what're":"what are","what's":"what has/is","what've":"what have","when's":"when is","when've":"when have","where'd":"where would","where's":"where is","where've":"where have","who'd":"who would","who'll":"who will","who'll've":"who will have","who're":"who are","who's":"who is","who've":"who have","why've":"why have","why'll":"why will","why're":"why are","why's":"why is","will've":"will have","won't":"will not",wont:"will not","won't've":"will not have","would've":"would have","wouldn't":"would not","wouldn't've":"would not have","y'all":"you all","y'all'd":"you all would","y'all'd've":"you all would have","y'all're":"you all are","y'all've":"you all have","you'd":"you would","you'd've":"you would have","you'll":"you will","you'll've":"you will have","you're":"you are","you've":"you have"},K=t,O=s,_=i,L=n,k=Y,J=l.isPrimitive,R=a,B=$,F=K(B);var G=function(e){var t,s,i,n,h,l;if(!J(e))throw new TypeError(R("invalid argument. Must provide a primitive string. Value: `%s`.",e));for(i="",t=k(e,!0),h=0;h<t.length;h++){if(s=t[h],O(s)){for(l=0;l<F.length;l++)if(n=F[l],_(s)===n){s=L(B[n]);break}}else for(l=0;l<F.length;l++)if(s===(n=F[l])){s=B[n];break}i+=s}return i},H=w,U=m,q=p;var Q=function(){var e,t,s,i,n,h,l;for(1===arguments.length?s=arguments[0]:2===arguments.length&&(s=arguments[0],e=arguments[1]),t=s.length,n=1,l=0;l<t;l++)n*=s[l];return i="int32"===e?new H(n):new U(n),(h={}).dtype=e,h.shape=s,h.strides=[s[1],1],h.offset=0,h.ndims=s.length,h.length=i.length,h.nbytes=i.byteLength,h.data=i,q(h,"get",o),q(h,"set",a),h;function o(e,t){var s=this.offset+e*this.strides[0]+t*this.strides[1];return this.data[s]}function a(e,t,s){return(e=this.offset+e*this.strides[0]+t*this.strides[1])>=0&&(this.data[e]=s),this}},X=Q;var Z=function(){var e,t,s,i;for(e=X([this.D,this.K]),s=0;s<this.D;s++)for(i=0;i<this.K;i++)t=(this.nd.get(s,i)+this.alpha)/(this.ndSum[s]+this.K*this.alpha),e.set(s,i,t);return e},ee=y.isPrimitive,te=g,se=o,ie=a;var ne=Q;var he=c,le=f;var oe=Q;var ae=function(e,t,s){var i,n,h,l,o,a,r,d;for(h=e.shape[0],l=e.shape[1],a=oe([h,l]),i=(s-1)/s,n=1/s,r=0;r<h;r++)for(d=0;d<l;d++)o=i*e.get(r,d)+n*t.get(r,d),a.set(r,d,o);return a},re=d,de=a,ve=c,ue=ae;var we=r,me=d,pe=v,ye=e,ge=u,ce=Y,fe=w,be=a,je=Q,xe=Z,De=function(e,t){return te(t)?se(t,"alpha")&&(e.alpha=t.alpha,!ee(e.alpha))?new TypeError(ie("invalid option. `%s` option must be a positive number. Option: `%s`.","alpha",e.alpha)):se(t,"beta")&&(e.beta=t.beta,!ee(e.beta))?new TypeError(ie("invalid option. `%s` option must be a positive number. Option: `%s`.","beta",e.beta)):null:new TypeError(ie("invalid argument. Options argument must be an object. Value: `%s`.",t))},Se=function(){var e,t,s,i;for(e=ne([this.K,this.W]),s=0;s<this.K;s++)for(i=0;i<this.W;i++)t=(this.nw.get(i,s)+this.beta)/(this.nwSum[s]+this.W*this.beta),e.set(s,i,t);return e},Te=function(){var e,t,s,i,n,h;for(this.z=[],n=0;n<this.D;n++){for(this.z.push([]),s=this.w[n].length,h=0;h<s;h++)t=le(he()*this.K),this.z[n].push(t);for(this.ndSum[n]=s,h=0;h<s;h++)i=this.w[n][h],e=this.z[n][h],this.nw.set(i,e,this.nw.get(i,e)+1),this.nd.set(n,e,this.nd.get(n,e)+1),this.nwSum[e]=this.nwSum[e]+1}},Ce=function(e,t,s){var i,n,h,l,o,a,r,d,v,u,w,m,p,y;if(!re(e))throw new TypeError(de("invalid argument. First argument must be a positive integer. Value: `%s`.",e));if(!re(t))throw new TypeError(de("invalid argument. Second argument must be a positive integer. Value: `%s`.",t));if(!re(s))throw new TypeError(de("invalid argument. Third argument must be a positive integer. Value: `%s`.",s));for(n=this.W*this.beta,i=this.K*this.alpha,w=0;w<e;w++){for(u=0;u<this.D;u++)for(y=0;y<this.ndSum[u];y++){for(a=this.w[u][y],h=this.z[u][y],this.nw.set(a,h,this.nw.get(a,h)-1),this.nd.set(u,h,this.nd.get(u,h)-1),this.ndSum[u]-=1,this.nwSum[h]-=1,o=[],m=0;m<this.K;m++)o.push((this.nw.get(a,m)+this.beta)/(this.nwSum[m]+n)*(this.nd.get(u,m)+this.alpha)/(this.ndSum[u]+i));for(m=1;m<this.K;m++)o[m]+=o[m-1];for(p=o[this.K-1]*ve(),h=0,v=0;v<this.K;v++)if(o[v]>p){h=v;break}this.nw.set(a,h,this.nw.get(a,h)+1),this.nd.set(u,h,this.nd.get(u,h)+1),this.nwSum[h]+=1,this.ndSum[u]+=1,this.z[u][y]=h}w%s==0&&w>t&&(r=this.getPhis(),l=this.getThetas(),this.phiList.push(r),this.thetaList.push(l),d=this.phiList.length,this.avgPhi=1===d?r:ue(this.avgPhi,r,d),d=this.thetaList.length,this.avgTheta=1===d?l:ue(this.avgTheta,l,d))}};function Ie(e,t){var s;for(s=0;s<e.length;s++)if(e[s]===t)return s;return-1}var Me=function(e,t,s){var i,n,h,l,o,a,r,d,v,u,w,m,p,y,g,c,f;if(!pe(e))throw new TypeError(be("invalid argument. First argument must be a string array. Value: `%s`.",e));if(!me(t))throw new TypeError(be("invalid argument. Number of topics `K` must be a positive integer. Value: `%s`.",t));if(a={},arguments.length>2&&(r=De(a,s)))throw r;for(m=e.length,l=a.alpha||50/t,o=a.beta||.1,n=[],f=[],d=0,p=0;p<m;p++)for(f.push([]),v=(w=ce(e[p])).length,y=0;y<v;y++)i=w[y],-1===(u=Ie(n,i))?(n.push(i),f[p].push(d),d+=1):f[p].push(u);return c=n.length,ye(h={},"K",t),ye(h,"D",m),ye(h,"W",c),ye(h,"alpha",l),ye(h,"beta",o),ye(h,"init",Te),ye(h,"fit",Ce),ye(h,"getPhis",Se),ye(h,"getThetas",xe),ye(h,"getTerms",b),h.nwSum=new fe(t),h.ndSum=new fe(m),h.nw=je([c,t],"int32"),h.nd=je([m,t],"int32"),h.phiList=[],h.thetaList=[],h.w=f,h.init(),h;function b(e,s){var i,h,l,o,a,r;if(!we(e)||e>=t)throw new TypeError(be("invalid argument. First argument must be a nonnegative integer smaller than the total number of topics. Value: `%s`.",e));if(s){if(!me(s))throw new TypeError(be("invalid argument. Second argument must be a positive integer. Value: `%s`.",s))}else s=10;for(l=[],i=[],r=0;r<s;r++){for(o=0,g=0;g<this.W;g++)(h=this.avgPhi.get(e,g))>o&&!ge(i,g)&&(o=h,a=g);i.push(a),l.push({word:n[a],prob:o})}return l}},Ee=l.isPrimitive,ze=b,Ae=j,Pe=x,Ne=a,Ve={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},We={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},Ye="[aeiouy]",$e="[^aeiou][^aeiouy]*",Ke=new RegExp("^"+$e+Ye+"[^aeiouwxy]$"),Oe=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy][aeiou]*[^aeiou][^aeiouy]*"),_e=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy][aeiou]*[^aeiou][^aeiouy]*([aeiouy][aeiou]*)?$"),Le=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy][aeiou]*[^aeiou][^aeiouy]*[aeiouy][aeiou]*[^aeiou][^aeiouy]*"),ke=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy]"),Je=/^(.+?)(ss|i)es$/,Re=/^(.+?)([^s])s$/,Be=/^(.+?)eed$/,Fe=/^(.+?)(ed|ing)$/,Ge=/^(.+?)y$/,He=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,Ue=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,qe=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,Qe=/^(.+?)(s|t)(ion)$/,Xe=/^(.+?)e$/,Ze=/.$/,et=/(at|bl|iz)$/,tt=new RegExp("([^aeiouylsz])\\1$");var st=function(e){var t,s,i,n;if(!Ee(e))throw new TypeError(Ne("invalid argument. First argument must be a string primitive. Value: `%s`.",e));return e.length<3||("y"===(t=(e=Ae(e))[0])&&(e=t.toUpperCase()+e.substr(1)),Je.test(e)?e=Pe(e,Je,"$1$2"):Re.test(e)&&(e=Pe(e,Re,"$1$2")),Be.test(e)?(n=Be.exec(e),Oe.test(n[1])&&(e=Pe(e,Ze,""))):Fe.test(e)&&(i=(n=Fe.exec(e))[1],ke.test(i)&&(e=i,et.test(e)?e+="e":tt.test(e)?e=Pe(e,Ze,""):Ke.test(e)&&(e+="e"))),Ge.test(e)&&(i=(n=Ge.exec(e))[1],ke.test(i)&&(e=i+"i")),He.test(e)&&(i=(n=He.exec(e))[1],s=n[2],Oe.test(i)&&(e=i+Ve[s])),Ue.test(e)&&(i=(n=Ue.exec(e))[1],s=n[2],Oe.test(i)&&(e=i+We[s])),qe.test(e)?(i=(n=qe.exec(e))[1],Le.test(i)&&(e=i)):Qe.test(e)&&(i=(n=Qe.exec(e))[1]+n[2],Le.test(i)&&(e=i)),Xe.test(e)&&(i=(n=Xe.exec(e))[1],(Le.test(i)||_e.test(i)&&!Ke.test(i))&&(e=i)),ze(e,"ll")&&Le.test(e)&&(e=Pe(e,Ze,"")),"y"===t&&(e=t.toLowerCase()+e.substr(1))),e},it=e,nt={};it(nt,"expandContractions",G),it(nt,"lda",Me),it(nt,"porterStemmer",st),it(nt,"tokenize",Y);var ht=nt;export{ht as default,G as expandContractions,Me as lda,st as porterStemmer,Y as tokenize};
//# sourceMappingURL=index.mjs.map
